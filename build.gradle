plugins {
    id 'application'
    id 'java'
    id 'maven-publish'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    maven {
        url = uri('https://plugins.gradle.org/m2/')
    }
}


dependencies {
    testImplementation 'com.browserstack:webdriver-framework-core:0.0.1'
    testImplementation 'io.qameta.allure:allure-cucumber6-jvm:2.17.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
    testImplementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    testImplementation 'io.cucumber:cucumber-java:6.11.0'
    testImplementation 'io.cucumber:cucumber-picocontainer:6.11.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:6.11.0'
    testImplementation 'org.junit.platform:junit-platform-suite:1.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.slf4j:slf4j-api:1.7.25'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
}

group = 'com.browserstack'
version = '1.0-SNAPSHOT'
description = 'browserstack-examples-junit5'
java.sourceCompatibility = JavaVersion.VERSION_1_8

allure.version '2.8.1'
allure.configuration 'testImplementation'
allure.autoconfigure true
allure.reportDir file('allure-report')
allure.resultsDir file('allure-results')

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext.cucumberCommon = ['cucumber.junit-platform.naming-strategy'    : long,
                      'cucumber.execution.parallel.enabled'        : true,
                      'cucumber.execution.parallel.config.strategy': 'fixed',
                      'cucumber.publish.enabled'                   : true,
                      'cucumber.publish.quiet'                     : true,
                      'cucumber.plugin'                            : 'com.browserstack.TestListener,' +
                              'io.qameta.allure.cucumber6jvm.AllureCucumber6Jvm,' +
                              'json:target/cucumber/report.json']
ext.featureParallel = ['parallel.feature' : 'true',
                       'parallel.platform': 'false']
ext.platformParallel = ['parallel.feature' : 'false',
                        'parallel.platform': 'true']
ext.featureSingleThread = ['cucumber.execution.parallel.config.fixed.parallelism': 1]
ext.featureMultiThread = ['cucumber.execution.parallel.config.fixed.parallelism': 5]
ext.platformSingleThread = ['parallel.threads': 1]
ext.platformMultiThread = ['parallel.threads': 5]

ext.singleTest = 'End to End Scenario'
ext.allTests = '.*'

ext.setupRunner = { taskName, parallelType, finalizedBy = '' ->
    def task = project.tasks.findByPath(taskName)
    task.testLogging.setDisplayGranularity(-1)
    task.testLogging.setShowCauses(true)
    task.testLogging.setShowExceptions(true)
    task.testLogging.setShowStackTraces(true)
    task.testLogging.setShowStandardStreams(true)
    task.outputs.upToDateWhen({ false })
    if (parallelType.equals(featureParallel)) {
        task.useJUnitPlatform()
    } else {
        task.finalizedBy finalizedBy
    }
}

ext.configure = { taskName, cucumberProperty, configFile, cucumberOptions, parallelType, featureThread, platformThread, includeTest ->
    def task = project.tasks.findByPath(taskName)
    task.systemProperties cucumberProperty
    task.systemProperties 'capabilities.config': configFile
    task.systemProperties cucumberOptions
    task.systemProperties parallelType
    task.systemProperties featureThread
    task.systemProperties platformThread
    task.systemProperties 'cucumber.filter.name': includeTest
}

ext.platformRunner = { taskName, configFile ->
    def task = project.tasks.findByPath(taskName)
    configure(taskName, cucumberCommon, configFile,
            cucumberCommon, platformParallel, featureSingleThread,
            platformMultiThread, allTests)
    task.main = "com.browserstack.ParallelPlatformTest"
    task.classpath = sourceSets["test"].runtimeClasspath
}

task 'on-prem'(type: Test) {
    def taskName = 'on-prem'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-on-prem.yml',
            cucumberCommon, featureParallel, featureSingleThread,
            platformSingleThread, singleTest)
}

task 'on-prem-suite'(type: Test) {
    def taskName = 'on-prem-suite'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-on-prem-suite.yml',
            cucumberCommon, featureParallel, featureSingleThread,
            platformSingleThread, allTests)
}

task 'docker'(type: Test) {
    def taskName = 'docker'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-docker.yml',
            cucumberCommon, featureParallel, featureSingleThread,
            platformSingleThread, singleTest)
}

task 'docker-parallel'(type: Test) {
    def taskName = 'docker-parallel'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-docker-parallel.yml',
            cucumberCommon, featureParallel, featureMultiThread,
            platformSingleThread, allTests)
}

task 'bstack-single'(type: Test) {
    def taskName = 'bstack-single'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-single.yml',
            cucumberCommon, featureParallel, featureSingleThread,
            platformSingleThread, singleTest)
}

task 'bstack-local'(type: Test) {
    def taskName = 'bstack-local'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-local.yml',
            cucumberCommon, featureParallel, featureSingleThread,
            platformSingleThread, singleTest)
}

task 'bstack-local-parallel'(type: Test) {
    def taskName = 'bstack-local-parallel'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-local-parallel.yml',
            cucumberCommon, featureParallel, featureMultiThread,
            platformSingleThread, allTests)
}

task 'bstack-local-parallel-browsers'(type: Test) {
    def taskName = 'bstack-local-parallel-browsers'
    setupRunner(taskName, platformParallel, 'parallelPlatformTestLocal')
}

task 'parallelPlatformTestLocal'(type: JavaExec) {
    def taskName = 'parallelPlatformTestLocal'
    platformRunner(taskName, 'capabilities-local-parallel-browsers.yml')
}

task 'bstack-parallel'(type: Test) {
    def taskName = 'bstack-parallel'
    setupRunner(taskName, featureParallel)
    configure(taskName, cucumberCommon, 'capabilities-parallel.yml',
            cucumberCommon, featureParallel, featureMultiThread,
            platformSingleThread, allTests)
}

task 'bstack-parallel-browsers'(type: Test) {
    def taskName = 'bstack-parallel-browsers'
    setupRunner(taskName, platformParallel, 'parallelPlatformTest')
}

task 'parallelPlatformTest'(type: JavaExec) {
    def taskName = 'parallelPlatformTest'
    platformRunner(taskName, 'capabilities-parallel-browsers.yml')
}